# handlers/profile.py
from aiogram import types, Bot, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from telegram_client.models import BotClient
from .handle_start_flow import give_parent_tree

profile_router = Router()  # <‚Äî –†–æ—É—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è

BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
EXIT_BTN = "üö™ –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"
CONFIRM_EXIT_BTN = "‚úÖ –î–∞, –≤—ã–π—Ç–∏"
CANCEL_EXIT_BTN = "‚ùå –û—Ç–º–µ–Ω–∞"
ASSISTANT_BTN = "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫"  # ‚Üê —É–¥–æ–±–Ω–æ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É


class ProfileSG(StatesGroup):
    viewing = State()
    confirm_exit = State()


def profile_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text=BACK_BTN), KeyboardButton(text=EXIT_BTN)]],
    )


def confirm_exit_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text=CONFIRM_EXIT_BTN)],
            [KeyboardButton(text=CANCEL_EXIT_BTN)],
        ],
    )


def back_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text=BACK_BTN)]],
    )


def format_profile_text(c: BotClient) -> str:
    full_name_parts = [c.last_name, c.first_name]
    full_name = " ".join(p for p in full_name_parts if p) or (
        f"@{c.username}" if c.username else "‚Äî"
    )
    phone = c.phone_number or "‚Äî"
    return f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n–§–ò–û: {full_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}"


# ... (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ format_profile_text –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


@profile_router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def enter_profile(message: types.Message, bot: Bot, state: FSMContext):
    bot_client = await BotClient.objects.filter(chat_id=message.from_user.id).afirst()
    if not bot_client:
        await state.clear()
        return await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=ReplyKeyboardRemove()
        )
    await state.set_state(ProfileSG.viewing)
    return await message.answer(
        format_profile_text(bot_client), reply_markup=profile_keyboard()
    )


# === –¢–û–ß–ï–ß–ù–´–ï –•–ï–ù–î–õ–ï–†–´ –í–ù–£–¢–†–ò viewing ===


@profile_router.message(ProfileSG.viewing, F.text == BACK_BTN)
async def profile_back(message: types.Message, bot: Bot, state: FSMContext):
    await state.clear()
    return await give_parent_tree(message, bot, True)


@profile_router.message(ProfileSG.viewing, F.text == EXIT_BTN)
async def profile_exit(message: types.Message, bot: Bot, state: FSMContext):
    await state.set_state(ProfileSG.confirm_exit)
    return await message.answer(
        "–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è? –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è, –Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.",
        reply_markup=confirm_exit_keyboard(),
    )


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫¬ª –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
@profile_router.message(
    ProfileSG.viewing, F.text == ASSISTANT_BTN, flags={"block": False}
)
async def profile_to_assistant(message: types.Message, bot: Bot, state: FSMContext):
    await state.clear()
    # –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º ‚Äî –ø—É—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–æ—É—Ç–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫¬ª


# Catch-all –≤ viewing: –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
@profile_router.message(ProfileSG.viewing, flags={"block": False})
async def profile_passthrough(message: types.Message, bot: Bot, state: FSMContext):
    await state.clear()
    # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ—Ä–µ–≤–æ) –æ—Ç—Ä–∞–±–æ—Ç–∞–ª


# === confirm_exit ===


@profile_router.message(ProfileSG.confirm_exit, F.text == CONFIRM_EXIT_BTN)
async def confirm_exit(message: types.Message, bot: Bot, state: FSMContext):
    bot_client = await BotClient.objects.filter(chat_id=message.from_user.id).afirst()
    if bot_client:
        await BotClient.objects.filter(pk=bot_client.pk).aupdate(is_logined=False)
    await state.clear()
    return await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
        reply_markup=ReplyKeyboardRemove(),
    )


@profile_router.message(ProfileSG.confirm_exit, F.text == CANCEL_EXIT_BTN)
async def cancel_exit(message: types.Message, bot: Bot, state: FSMContext):
    bot_client = await BotClient.objects.filter(chat_id=message.from_user.id).afirst()
    await state.set_state(ProfileSG.viewing)
    return await message.answer(
        format_profile_text(bot_client), reply_markup=profile_keyboard()
    )
