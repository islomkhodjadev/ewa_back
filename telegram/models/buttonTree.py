from django.db import models
from django.core.exceptions import ValidationError
import os
from PIL import Image


class ButtonTree(models.Model):
    text = models.CharField(max_length=255, verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏")
    parent = models.ForeignKey(
        "ButtonTree",
        on_delete=models.CASCADE,
        related_name="children",
        null=True,
        blank=True,
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞",
    )

    class Meta:
        verbose_name = "üîò –ö–Ω–æ–ø–∫–∞"
        verbose_name_plural = "üîò –î–µ—Ä–µ–≤–æ –∫–Ω–æ–ø–æ–∫"

    def __str__(self) -> str:
        return self.text

    def is_root(self):
        return self.parent is None

    def is_leaf(self):
        return not self.children.exists()


class AttachmentToButton(models.Model):
    button = models.OneToOneField(
        ButtonTree,
        on_delete=models.CASCADE,
        related_name="attachment",
        verbose_name="–ö–Ω–æ–ø–∫–∞",
    )
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –≤–ª–æ–∂–µ–Ω–∏—è")
    TEXT = "text"
    FILE = "file"
    VIDEO = "video"
    IMAGE = "image"
    VIDEO_IMAGE = "video_image"
    VIDEO_IMAGE_FILE = "video_image_file"
    choices = [
        (TEXT, "–¢–µ–∫—Å—Ç"),
        (FILE, "–§–∞–π–ª"),
        (VIDEO, "–í–∏–¥–µ–æ"),
        (IMAGE, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
        (VIDEO_IMAGE, "–í–∏–¥–µ–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
        (VIDEO_IMAGE_FILE, "–í–∏–¥–µ–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ñ–∞–π–ª "),
    ]
    source_type = models.CharField(
        max_length=16,
        choices=choices,
        default=TEXT,
        verbose_name="–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
    )

    class Meta:
        verbose_name = "üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –∫–Ω–æ–ø–∫–µ"
        verbose_name_plural = "üìé –í–ª–æ–∂–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–∞–º"

    def __str__(self):
        return f"–í–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏: {self.button.text}"


def validate_thumbnail(value):
    """
    Custom validator function for thumbnail images
    Validates:
    - Format must be JPEG
    - Size must be less than 200 kB
    - Dimensions must not exceed 320x320 pixels
    """
    if not value:
        return

    # Size check (200 kB = 200 * 1024 bytes)
    if value.size > 200 * 1024:
        raise ValidationError("–†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 kB.")

    # Format check by extension
    if not value.name.lower().endswith((".jpg", ".jpeg")):
        raise ValidationError("–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG (.jpg –∏–ª–∏ .jpeg).")

    # Dimension and format check using PIL
    try:
        with Image.open(value) as img:
            width, height = img.size
            if width > 320 or height > 320:
                raise ValidationError(
                    "–†–∞–∑–º–µ—Ä—ã –º–∏–Ω–∏–∞—Ç—é—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 320x320 –ø–∏–∫—Å–µ–ª–µ–π."
                )

            # Check if image is actually JPEG format
            if img.format not in ["JPEG", "JFIF"]:
                raise ValidationError("–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG.")

    except Exception as e:
        raise ValidationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")


class AttachmentData(models.Model):
    source = models.FileField(upload_to="tree-buttons/leaf-data", verbose_name="–§–∞–π–ª")
    attachment = models.ForeignKey(
        AttachmentToButton,
        on_delete=models.CASCADE,
        related_name="data",
        verbose_name="–í–ª–æ–∂–µ–Ω–∏–µ",
    )
    thumbnail = models.ImageField(
        verbose_name="–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞",
        null=True,
        blank=True,
        upload_to="thumbnails/",
        help_text="–§–æ—Ä–º–∞—Ç: JPEG, –º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 200 kB, –º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä—ã: 320x320px",
        validators=[validate_thumbnail],  # Use function instead of class
    )

    class Meta:
        verbose_name = "üìÇ –î–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è"
        verbose_name_plural = "üìÇ –§–∞–π–ª—ã –≤–ª–æ–∂–µ–Ω–∏–π"

    def clean(self):
        stype = self.attachment.source_type
        ext = os.path.splitext(self.source.name)[1].lower() if self.source else ""

        image_exts = [".jpg", ".jpeg", ".png", ".gif", ".webp"]
        video_exts = [".mp4", ".mov", ".avi", ".mkv", ".webm"]

        if stype == AttachmentToButton.TEXT:
            raise ValidationError("–î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã.")

        if stype == AttachmentToButton.IMAGE and ext not in image_exts:
            raise ValidationError(
                f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{ext}'. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(image_exts)}"
            )

        if stype == AttachmentToButton.VIDEO and ext not in video_exts:
            raise ValidationError(
                f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ '{ext}'. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(video_exts)}"
            )

        if (
            stype == AttachmentToButton.VIDEO_IMAGE
            and ext not in video_exts + image_exts
        ):
            raise ValidationError(
                f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç '{ext}'. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(video_exts + image_exts)}"
            )

        if stype == AttachmentToButton.FILE and not ext:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ç–∏–ø–∞ '–§–∞–π–ª'.")

        if stype == AttachmentToButton.VIDEO_IMAGE_FILE and not ext:
            raise ValidationError(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ç–∏–ø–∞ '–í–∏–¥–µ–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ñ–∞–π–ª'."
            )

    def save(self, *args, **kwargs):
        """Override save to ensure validation runs everywhere"""
        self.full_clean()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"–§–∞–π–ª –¥–ª—è {self.attachment}"
